// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int       @id @default(autoincrement())
  firstName           String?
  lastName            String?
  dateOfBirth         DateTime?
  email               String    @unique
  phone               String?
  street              String?
  number              String?
  unitNumber          String?
  postalCode          String?
  city                String?
  newsletter          Boolean   @default(false)
  isActive            Boolean   @default(true)
  isVolunteer         Boolean   @default(false)
  userName            String    @unique
  passwordHash        String
  roles               UserRole[]
  registrations       ActivityRegistration[]
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
}

model Role {
  id          Int         @id @default(autoincrement())
  name        String      @unique
  users       UserRole[]
}

model UserRole {
  userId      Int
  roleId      Int
  user        User    @relation(fields: [userId], references: [id])
  role        Role    @relation(fields: [roleId], references: [id])

  @@id([userId, roleId])
}

model Activity {
  id                  Int       @id @default(autoincrement())
  name                String
  description         String?
  startDate           DateTime
  endDate             DateTime
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  minimumParticipants Int
  maximumParticipants Int
  price               Float
  imageUrl            String?
  locationId          Int
  location            Location  @relation(fields: [locationId], references: [id])
  registrations       ActivityRegistration[]
}

model ActivityRegistration {
  id           Int      @id @default(autoincrement())
  personId     Int
  activityId   Int
  registeredAt DateTime @default(now())
  hasPayed     Boolean  @default(false)

  user         User     @relation(fields: [personId], references: [id])
  activity     Activity @relation(fields: [activityId], references: [id])
}

model Location {
  id          Int       @id @default(autoincrement())
  name        String
  street      String
  number      String
  unitNumber  String?
  postalCode  String
  city        String
  activities  Activity[]
}